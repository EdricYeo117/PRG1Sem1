#function to display total number of carparks in carpark-information.csv, this is option 1
''' using len data_list to get total number of carparks '''

def total_carpark():
    total_carpark = len(data_list)
    print(f"Total Number of carparks in '{filepath}': {total_carpark}")

#function to display all basement carparks in carpark-information.csv, this is option 2
''' checks if basement carpark correlates with the value tied to key "Carpark Type" '''

def total_basement_carpark():
    count = 0
    basement_carpark_list = []
    print("{:<11} {:<23} {:<32}".format("Carpark No", "Carpark Type", "Address"))
    for items in data_list:
        if "BASEMENT CAR PARK" == items["Carpark Type"]:
            count += 1
            basement_carpark_list.append(items)
            print("{:<11} {:<23} {:<32}".format(items["Carpark Number"],items["Carpark Type"], items["Address"]))      
    print(f"Total number: {count}")

#function to read certain carpark availability file, this is option 3
''' While True loop with try and except checks for correct input of file, if it detects FielNotFoundError, input is requestsed again
1. reads file, 2. parses data into dictionaries in a list, 3. converts data from string to interger '''

def read_carpark_availability(filepath):   
    while True:
        try:
            with open(filepath, "r") as file:
                lines = file.readlines()
                header = lines[1].strip().split(",")

                for line in lines[2:]:
                    values = line.strip().split(",")
                    temp_dict = dict(zip(header, values))
                    cp_availability.append(temp_dict)

                for item in cp_availability:
                    for key, value in item.items():
                        if value.isdigit() == True:
                            item[key] = int(value)
                file.close()
            break
        except FileNotFoundError:
            print("Error, please key in the filename properly")
            filepath = input("Enter the file name again: ").lower()
            continue
    return cp_availability

#function to print total number of carparks in data file, this is option 4
''' this counts the total number of items in list, providing total number of carparks '''

def total_carpark_availability():
    total_carpark = len(cp_availability)
    if len(cp_availability) == 0:
        print("Error, read file using option 3 first")
    else:
        print(f"Total Number of Carparks in the FIle: {total_carpark}")
   
#function to print carparks without available lots, this is option 5
''' this counts items in cp_availability lists, checks if key 'lots available' : value == 0, 
then counts total number. Prints carpark numbers and total count'''

def carpark_with_lots():
    temp_list = []
    count = 0
    for items in cp_availability:
        if items['Lots Available'] == 0:
            temp_list.append(items)
            count += 1
    for items in temp_list:
        print(f"Carpark Number : {items['Carpark Number']}")
    print(f"Total Number: {count}")
    
#function to print carparks with at least x% available lots, this is option 6
''' this checks if lots available == 0, then prompts input for percentage value, then appends to a local list, 
list is then printed using for loop'''

def carpark_pcnt_lots():
    while True:
        try:
            percent = float(input("Enter the percentage required: "))
            break
        except:
            print("Error")
            print("Please re-enter the percentage required: ")
            continue
    temp_list = []
    count = 0
    for items in cp_availability:
        if items['Lots Available'] == 0:
            continue
        else:
            percent_check = float((items["Lots Available"] / items["Total Lots"]) * 100)
        if percent_check >= percent: 
            temp_list.append(items)

    print("{:<11} {:<23} {:<32} {:<40}".format("Carpark No", "Total Lots", "Lots Available", "Percentage"))
    for item in temp_list:
        count += 1
        percent_check = float((item["Lots Available"] / item["Total Lots"]) * 100)
        print("{:<11} {:<23} {:<32} {:<40.1f}".format(item["Carpark Number"],item["Total Lots"], item["Lots Available"], percent_check))      
    print(f"Total number: {count}")
    
# Function to print address of carparks, and information in option 6, this is option 7
''' 1. while loop for exception handling
    2. for loop to check if lots available = 0 
    3. nested for loop to check correlating carpark numbers in temp_list created in 2. and global list of carpark information, creates matching_address_list
    4. for loop to zip matching_address_list and temp_list together, adding a new key:value pair into temp_list
    5. for loop to print data '''

def carpark_pcnt_lots_address(): 
    while True:
        try:
            percent = float(input("Enter the percentage required: "))
            break
        except:
            print("Error")
            print("Please re-enter the percentage required: ")
            continue
    temp_list = []
    matching_address_list = []
    count = 0
    print("{:<11} {:<23} {:<32} {:<40} {:<50}".format("Carpark No", "Total Lots", "Lots Available", "Percentage", "Address"))
    for items in cp_availability:
        if items['Lots Available'] == 0:
            continue
        else:
            percent_check = float((items["Lots Available"] / items["Total Lots"]) * 100)
        if percent_check >= percent: 
            temp_list.append(items)

    for i in temp_list:
        for j in data_list:
            if (i["Carpark Number"] == j["Carpark Number"]):
                matching_address_list.append(j["Address"])
        
    for i, value in zip(temp_list, matching_address_list):
        i["Address"] = value

    for item in temp_list:
        if "Address" not in item:
            item["Address"] == " "

    for item in temp_list:
        count += 1
        percent_check = float((item["Lots Available"] / item["Total Lots"]) * 100)
        print("{:<11} {:<23} {:<32} {:<40.1f} {:<50}".format(item["Carpark Number"],item["Total Lots"], item["Lots Available"], percent_check, item['Address']))     
    print(f"Total number: {count}")

# Function to display all carparks at a given location, this is advanced feature option 8

def carpark_location_check():
    location = input("Enter the carpark location: ").upper()
    temp_list = []
    matching_address_list = []
    count = 0

    for items in cp_availability:
        temp_list.append(items)

    for i in temp_list:
        for j in data_list:
            if (i["Carpark Number"] == j["Carpark Number"]):
                matching_address_list.append(j["Address"])

    for i, value in zip(temp_list, matching_address_list):
        i["Address"] = value

    for item in temp_list:
        if "Address" not in item:
            item["Address"] == " "

    for item in temp_list:
            try:
                if location in item["Address"]:
                    count += 1
                    try:
                        percent_check = float((item["Lots Available"] / item["Total Lots"]) * 100)
                    except:
                        percent_check = 0
                    print("{:<11} {:<23} {:<32} {:<40.1f} {:<50}".format(item["Carpark Number"],item["Total Lots"], item["Lots Available"], percent_check, item['Address']))
                else:
                    continue
            except:
                continue
    if count > 0:
        print(f"Total number of carparks in location: {count}")
    else:
        print("Error no carparks found at location")

# Function to display the carpark with most parking lots, this is advanced feature option 9
''' <type functionaility here> '''
''' make empty variable, variable == lots, for every i['Address], check if lots > than variable, if lots > than variable; lots replace variable, replace until loop finish
then another loop, check if variable == lots, then print info, this is an alternative method '''

def max_carpark (): 
    temp_list = []
    matching_address_list = []
    max_lots = 0
    max_cp_info = {}
    
    for items in cp_availability:
        temp_list.append(items)

    make_new_list(temp_list, cp_availability, matching_address_list)
  
    max_lots = max(temp_list, key=lambda x: x['Total Lots'])['Total Lots']
    
    for items in temp_list:
        if items['Total Lots'] == max_lots:
            max_cp_info.update(items)
    
    percent_check = float((max_cp_info["Lots Available"] / max_cp_info["Total Lots"]) * 100)

    print("{:<11} {:<23} {:<32} {:<40} {:<50}".format("Carpark No", "Total Lots", "Lots Available", "Percentage", "Address"))
    print("{:<11} {:<23} {:<32} {:<40.1f} {:<50}".format(max_cp_info["Carpark Number"],max_cp_info["Total Lots"], max_cp_info["Lots Available"], percent_check, max_cp_info['Address']))

# Function to create an output file with carpark avaialbility and sort by lots available, this is advanaced feature option 10
''' conveniently, I can make the same list from everything previously, so copy paste code'''

def carpark_file():
    temp_list = []
    matching_address_list = []
    count = 0

    for items in cp_availability:
        temp_list.append(items)

    for i in temp_list:
        for j in data_list:
            if (i["Carpark Number"] == j["Carpark Number"]):
                matching_address_list.append(j["Address"])

    for i, value in zip(temp_list, matching_address_list):
        i["Address"] = value

    for item in temp_list:
        if "Address" not in item:
            item["Address"] == " "
    
    sorted_list = sorted(temp_list, key=lambda x:x['Lots Available'])
    print(sorted_list)

#writing data
    file_path = "carpark-availability-with-addresses.csv"
    key_names = sorted_list[0].keys()

    with open(file_path, 'w') as file:
        header = ','.join(key_names)
        file.write(header + '\n')

        for item in sorted_list:
            row = f"{item['Carpark Number']},{item['Total Lots']},{item['Lots Available']},{item['Address']}"
            file.write(row + '\n')
    
# Function to read carpark info csv file, i.e intiailize during programe start
''' This opens the file and uses len(values) to check for proper amounts of key:value pairs (4),
This method is used to circumvent "123A, 456B XYZ Road" data that interferes with split; 
1) uses map to attach values index [3] onwards 2) uses zip to form a dictionary from the .csv file, dictionary has 1st line as keys, subsequent line as values'''

def read_carpark_info(filepath):
    data_list = []
    try:
        with open(filepath, "r") as file:
            lines = file.readlines()
            header = lines[0].strip().split(",")
            for line in lines[1:]:
                values = line.strip().split(",")
                while len(values) > 4:
                    values[3] = ','.join(map(str, values[3:])).strip('"')
                    values = values[:4]                
                temp_dict = dict(zip(header, values))
                data_list.append(temp_dict)
    except FileNotFoundError:
        print("FileNotFoundError")
    return data_list
    
# Function to make a new list, with all the info available

def make_new_list(x, y, z):

    for i in x:
        for j in y:
            if (i["Carpark Number"] == j["Carpark Number"]):
                z.append(j["Address"])
        
    for i, value in zip(x, z):
        i["Address"] = value

    for item in x:
        if "Address" not in item:
            item["Address"] == " "
    return x

# Function to display menu, starts with programme
''' Uses a nested list to print menu, then a for loop'''

def display_menu():
    menu = [
        ["1", "Display Total Number of Carparks in 'carpark-information.csv'"],
        ["2", "Display All Basement Carparks in 'carpark-information.csv'"],
        ["3","Read Carpark Availability Data File"],
        ["4", "Print Total Number of Carparks in the File Read in [3]"],
        ["5", "Display Carparks Without Available Lots"],
        ["6", "Display Carparks With At Least x% Available Lots"],
        ["7", "Display Addresses of Carparks With At Least x% Available Lots"],
        ["8", "Display All Carparks at Given Location"],
        ["9", "Display carpark with Max Lots Availble"],
        ["10", "Create an Output File with Carpark Availability with Addresses and Sort by Lots Available"],
        ["0", "Exit"]
    ]

    print("MENU\n====")
    for row in menu:
        options, description = row
        print(f"[{options}] {description}")

# Global Variables
filepath = "carpark-information.csv"
data_list = read_carpark_info(filepath)    
cp_availability = []    

# While loop to intiate programme, uses elif statements for selection
''' TypeError and ValueError for exception handling, elif statements to check which functions to run '''

while True:
        display_menu()
        try:
            option = int(input("Enter your option: "))
            if option == 1:
                total_carpark()
            elif option == 2:
                total_basement_carpark()
            elif option == 3:
                read_carpark_availability(filepath = input("Enter the file name: ").lower())
            elif option == 4:
                total_carpark_availability()
            elif option == 5:
                carpark_with_lots()
            elif option == 6:
                carpark_pcnt_lots()
            elif option == 7:
                carpark_pcnt_lots_address()
            elif option == 8:
                carpark_location_check()
            elif option == 9:
                max_carpark()
            elif option == 10:
                carpark_file()
            elif option == 0:
                break
        except TypeError and ValueError:
            print("Error")
    